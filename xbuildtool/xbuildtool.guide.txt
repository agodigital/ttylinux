ttylinux xbuildtool Cross-tool Chain Builder's and User's Guide

This file is NOT part of the kegel-initiated cross-tools software.
This file IS part of the ttylinux xbuildtool software.
The license that this document falls under is FDLv1.2 as follows:

Copyright (C) 2007-2013 Douglas Jerome <douglas@ttylinux.org>

License: Creative Commons Attribution Share Alike (CC-by-sa), v3.0
         http://creativecommons.org/licenses/by-sa/3.0/

FILE NAME

	xbuildtool.guide.txt
	Revision: 1.5
	June 8, 2013

PROGRAM INFORMATION

	Developed by:	ttylinux project
	Developer:	Douglas Jerome, drj, <douglas@ttylinux.org>

FILE DESCRIPTION

	This document is the ttylinux xbuildtool Builder's and User's Guide.

CHANGE LOG

	08jun13	drj	Changed license of this document CC-by-sa, see above.
	01jun13	drj	Fixed spelling.
	04feb12	drj	Reorganized the project and renamed to xbuildtool.
	20dec08	drj	Added the download separate from setup.
	08nov08	drj	Added comments about host-based tool chain proxy.
	07nov08	drj	Revised and converted to use for ttylinux.
	13sep07	drj	Finished and baselined first version for flight linux.



                          Builder's and User's Guide
                                      for
                              ttylinux xbuildtool




                               Table of Contents
Section                                                                     Page

1 INTRODUCTION
  1.1 Overview
  1.2 License

2 xbuildtool DESIGN
  2.1 xbuildtool Environment and Directory Structure

3 USING xbuildtool
  3.1 Setting Up xbuildtool
  3.2 Building A Cross-development Tool Chain

4 USING AN xbuildtool CROSS-TOOL CHAIN
  4.1 Using A Cross-development Tool Chain



==============
1 INTRODUCTION
==============

============
1.1 Overview
============

xbuildtool is a ttylinux subproject for building cross-development tool chains
in a Linux environment.  The cross-development tool chains built by xbuildtool
are intended to be used to cross-build Linux distributions, particularly
embedded Linux distributions.

xbuildtool consists of a configuration Bash shell script, main tool-building
Bash shell script, a Bash shell script for each tool-chain component, a small
configuration shell script for each tool-chain component, a makefile, a
specific directory structure, and this document.

xbuildtool programming (the xbuildtool makefile and shell scripts that build a
cross-tool chain) is distributed under the GNU Public License version 2.

-----------------------------------
Linux Cross-development Tool Chains
-----------------------------------

A GCC-based, Linux-targeted cross-development tool chain is more than a
compiler, assembler, linker and etc.  A cross-compiling GCC has target CPU
object code components (C library) that it links with the target application
software being developed; therefore, a cross-compiling GCC itself must have
access to an existing target C library that provides the target CPU object
code components.

Also, the C library for Linux systems contains functions that make use of Linux
kernel system calls; therefore, the cross-built target library needs to have
been built with Linux Kernel header files.  The version of the Linux kernel
header files defines the target system's Linux kernel interface version.  When
you have a running cross-compiled system, do not try to use a Linux kernel
older than the Linux kernel version that supplied the Linux kernel header files
used to cross-build the C library.

So, in order to build a cross-compiling GCC, you need to have an already
cross-built C library.  How do you get a cross-built C library, built against
some Linux kernel version's header files, when you don't yet have a
cross-compiling GCC?  The answer is to partially build GCC and the C library
alternately several times, each time building more of GCC and the C library.
Read the xbuildtool main shell script, mentioned in section _2 xbuildtool
DESIGN_ below, to see how it is done.

Re-read the previous three paragraphs until you really understand them.

===========
1.2 License
===========

The xbuildtool shell scripts and makefile are licensed under the FSF GPL2.

The xbuildtool documentation are licensed under Creative Commons Attribution
Share Alike (CC-by-sa), v3.0


===================
2 xbuildtool DESIGN
===================

The main build script, XBT_DIR/scripts/_build-toolchain.sh, is fairly well
documented.  Read it to truly understand the process of building a
cross-development tool chain.  The shell environmental variable XBT_DIR is
setup when xbuildtool is setup, as described below; XBT_DIR is set to
the directory path of the top-level xbuildtool directory.

===================================================
2.1 xbuildtool Environment and Directory Structure
===================================================

The shell environmental variables in the following directory structure diagram
are set by the xbuildtool shell scripts.

XBT_DIR/
        |-- CC-by-sa/
        |-- GPL
        |-- Makefile
        |-- README
        |-- bin-link/
        |-- build/
        |-- config/
        |-- configure
        |-- pkg-src/
        |-- scripts
        |   |-- _build-toolchain.sh
        |   |-- _functions.sh
        |   |-- binutils
        |   |   |-- binutils-methods.sh
        |   |   `-- binutils-versions.sh
        |   |-- gcc
        |   |   |-- gcc-methods.sh
        |   |   `-- gcc-versions.sh
        |   |-- glibc
        |   |   |-- glibc-methods.sh
        |   |   `-- glibc-versions.sh
        |   |-- linux
        |   |   |-- linux-methods.sh
        |   |   `-- linux-versions.sh
        |   `-- uClibc
        |       |-- uClibc-methods.sh
        |       `-- uClibc-versions.sh
        |-- xbt-build-config.sh
        |-- xbt-build-env.sh
        `-- xbuildtool.guide.txt

Directory XBT_DIR/build/
------------------------

This is the directory in which the building of a cross-tool chain's components
is performed.

Directory XBT_DIR/pkg-src/
--------------------------

The XBT_DIR/pkg-src/ directory must exists and have the correct versions of
the source code packages.  These are fetched over the network from gnu.org and
kernel.org when setup xbuildtool.  See section _3.1 Setting Up xbuildtool_

Directory XBT_DIR/scripts/
--------------------------

The directory has the build scripts; there is a general bild script which calls
a build scripts specific to each cross-tool chain component.


==================
3 USING xbuildtool
==================

=========================
3.1 Setting Up xbuildtool
=========================

Go to the top-level xbuildtool directory and type this make command at the
shell prompt:

	$ cd <some path>/xbuildtool-<version>
	$ make setup

This sets up the bin-link directory.  This directory is setup like a
cross-building tool chain, but it is implement by links to your own system's
GCC and GLIBC.

After "make setup" xbuildtool is configured.

===========================================
3.2 Building A Cross-development Tool Chain
===========================================

Using make
----------

Change directory to the top-level xbuildtool directory and type "make help";
the output will be the list of available make commands.  To build a
cross-development tool chain, execute make with a command line like one of
these:

     $ make i486-2.9-gnu
     $ make powerpc-2.14-gnu

The word following the make command is the make target.  It is the name of the
target architecture for the cross-development tool chain you want to build.  To
find the available cross-development tool chains that cross-tools can build,
use the "help" target:

     $ make help

Manual Process
--------------

After configuring xbuildtool as described in section _3.1 Configuring A
Cross-development Tool Chain_, do the following steps.

1. Change directory to xbuildtool.
   $ cd /<some path>/xbuildtool-<version>

2. Copy the file named "/config/xbt-build-config.sh" to the directory.
   $ rm -f xbt-build-config.sh
   $ cp config/xbt-build-config.sh xbt-build-config.sh

3. Edit xbt-build-config.sh and set the fields. You are not expected to know
   to what to set the fields.  To do that you need to know the configuration
   shell scripts in each of the component directories in the scripts directory,
   so you should first spend time reading and correctly updating them.

4. Execute the cross-development tool chain building script and wait.
   $ \time ../scripts/_build-toolchain.sh

-----------------------------------------------
Build Output - The Cross-development Tool Chain
-----------------------------------------------

The result of building a cross-development tool chain is a new directory tree
containing the cross-development tool chain; this tool chain will be in a
directory that is named in a field in the xbt-build-config.sh file.

The cross-development tool chain directories have:

=> C library and Linux kernel source code packages

=> cross-tool chain directory, which has:
   -> set of build logs
   -> shell script describing versions of the cross-development tool chain
      components
   -> two subdirectory trees, one for the host-based cross-tools and one for
      the target-resident components of the cross-tools

The host-based cross-tools are the compiler, assembler, linker and etc.; these
execute on the host system but create output for executing on the target
system.  The target-resident components are the C library header files, library
binary object code files and etc.  GCC, being the wonderful tool that it is,
has target-resident libraries that are stored in the host subdirectory tree,
not the target subdirectory tree.  Sweet.

======================================
4 USING AN xbuildtool CROSS-TOOL CHAIN
======================================

========================================
4.1 Using A Cross-development Tool Chain
========================================

The following is a hypothetical example of a typical software package using
powerpc cross-development tool chain to configure and build.  The ttylinux
package build scripts are full of this sort of thing.

# Avoid inheriting build tool baggage.  Allow no inadvertent host-oriented
# commands or flags.
#
xport AR=""
export AS=""
export CC=""
export CPP=""
export CXX=""
export LD=""
export NM=""
export OBJCOPY=""
export MAKE="make ${MAKEFLAGS}"
export RANLIB=""
export SIZE=""
export STRIP=""

export ARFLAGS=""
export ASFLAGS=""
export CFLAGS=""
export CPPFLAGS=""
export CXXFLAGS=""
export LDFLAGS=""
export MAKEFLAGS=""

XBT_XHOST_DIR="${XBT_DIR}/powerpc-generic-linux-gnu/host"
XBT_XTARG_DIR="${XBT_DIR}/powerpc-generic-linux-gnu/target"

# Configure package for building.
#
AS=${XBT_AS} \
AR=${XBT_AR} \
CC=${XBT_CC} \
CXX=${XBT_CXX} \
LD=${XBT_LD} \
RANLIB=${XBT_RANLIB} \
SIZE=${XBT_SIZE} \
STRIP=${XBT_STRIP} \
CFLAGS="-mtune=powerpc -Os" \
./configure \
        --build=i686-pc-linux-gnu \
        --host="powerpc-generic-linux-gnu"

# Make package.
#
PATH=${XBT_BIN_PATH}/usr/bin:${PATH} make


[eof]
